// <auto-generated />
using System;
using Examination_DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examination_DAL.Migrations
{
    [DbContext(typeof(ExaminationDbContext))]
    [Migration("20231211045754_ss")]
    partial class ss
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Examination_DAL.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Examination_DAL.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Examination_DAL.Models.AnswerResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AnswerAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("ExamResponseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("ExamResponseId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerResponses");
                });

            modelBuilder.Entity("Examination_DAL.Models.Classroom", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Examination_DAL.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExamCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExamCode")
                        .IsUnique()
                        .HasFilter("[ExamCode] IS NOT NULL");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ExamDetailCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<double>("MaxiumMark")
                        .HasColumnType("float");

                    b.Property<double>("PassMark")
                        .HasColumnType("float");

                    b.Property<int?>("ReTestNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TotalQuestion")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExamDetailCode")
                        .IsUnique();

                    b.HasIndex("ExamId");

                    b.ToTable("ExamDetails");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExamDetailId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExamDetailId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExamDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ExamScheduleId")
                        .HasColumnType("int");

                    b.Property<double?>("FinishTime")
                        .HasColumnType("float");

                    b.Property<bool?>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionCorrect")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionNotAnswered")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionWrong")
                        .HasColumnType("int");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<string>("ScoredBy")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool?>("ScoredMethod")
                        .HasColumnType("bit");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExamDetailId");

                    b.HasIndex("ExamScheduleId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ExamResponses");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamRoom", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ExamRooms");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassRoomId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("ExamRoomId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClassRoomId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExamId");

                    b.HasIndex("ExamRoomId");

                    b.ToTable("ExamSchedules");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamScheduleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExamScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ExamScheduleId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("ExamScheduleDetails");
                });

            modelBuilder.Entity("Examination_DAL.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<string>("IdParticipant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Examination_DAL.Models.Participant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(1);

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("ClassroomId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Examination_DAL.Models.Permission", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Examination_DAL.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Docs")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Point")
                        .HasColumnType("float");

                    b.Property<byte?>("QuestionLevelId")
                        .IsRequired()
                        .HasColumnType("tinyint")
                        .HasColumnOrder(3);

                    b.Property<byte?>("QuestionTypeId")
                        .IsRequired()
                        .HasColumnType("tinyint")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("QuestionLevelId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Examination_DAL.Models.QuestionLevel", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("QuestionLevels");
                });

            modelBuilder.Entity("Examination_DAL.Models.QuestionType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("Examination_DAL.Models.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte?>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Examination_DAL.Models.Subject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Examination_DAL.Models.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("PermissionId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("Examination_DAL.Models.Answer", b =>
                {
                    b.HasOne("Examination_DAL.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Examination_DAL.Models.AnswerResponse", b =>
                {
                    b.HasOne("Examination_DAL.Models.Answer", "Answer")
                        .WithMany("AnswerResponses")
                        .HasForeignKey("AnswerId");

                    b.HasOne("Examination_DAL.Models.ExamResponse", "ExamResponse")
                        .WithMany("AnswerResponses")
                        .HasForeignKey("ExamResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Question", "Question")
                        .WithMany("AnswerResponses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("ExamResponse");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Examination_DAL.Models.Exam", b =>
                {
                    b.HasOne("Examination_DAL.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamDetail", b =>
                {
                    b.HasOne("Examination_DAL.Models.Staff", "Staff")
                        .WithMany("ExamDetails")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Exam", "Exam")
                        .WithMany("ExamDetails")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamQuestion", b =>
                {
                    b.HasOne("Examination_DAL.Models.ExamDetail", "ExamDetail")
                        .WithMany()
                        .HasForeignKey("ExamDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Question", "Question")
                        .WithOne()
                        .HasForeignKey("Examination_DAL.Models.ExamQuestion", "QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamDetail");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamResponse", b =>
                {
                    b.HasOne("Examination_DAL.Models.ExamDetail", "ExamDetail")
                        .WithMany()
                        .HasForeignKey("ExamDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.ExamSchedule", "ExamSchedule")
                        .WithMany("ExamResponse")
                        .HasForeignKey("ExamScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Participant", "Participant")
                        .WithMany("ExamResponses")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Staff", null)
                        .WithMany("ExamResponses")
                        .HasForeignKey("StaffId");

                    b.HasOne("Examination_DAL.Models.Subject", "Subject")
                        .WithMany("ExamResponses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ExamDetail");

                    b.Navigation("ExamSchedule");

                    b.Navigation("Participant");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamSchedule", b =>
                {
                    b.HasOne("Examination_DAL.Models.Classroom", "ClassRoom")
                        .WithMany()
                        .HasForeignKey("ClassRoomId");

                    b.HasOne("Examination_DAL.Models.Staff", "Staff")
                        .WithMany("ExamSchedules")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Examination_DAL.Models.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.ExamRoom", "ExamRoom")
                        .WithMany("ExamSchedules")
                        .HasForeignKey("ExamRoomId");

                    b.Navigation("ClassRoom");

                    b.Navigation("Exam");

                    b.Navigation("ExamRoom");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamScheduleDetail", b =>
                {
                    b.HasOne("Examination_DAL.Models.ExamSchedule", "ExamSchedule")
                        .WithMany("ExamScheduleDetail")
                        .HasForeignKey("ExamScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Participant", "Participant")
                        .WithMany("ExamScheduleDetails")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamSchedule");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Examination_DAL.Models.Participant", b =>
                {
                    b.HasOne("Examination_DAL.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Examination_DAL.Models.Classroom", "Classroom")
                        .WithMany("Participants")
                        .HasForeignKey("ClassroomId");

                    b.Navigation("Account");

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("Examination_DAL.Models.Question", b =>
                {
                    b.HasOne("Examination_DAL.Models.QuestionLevel", "QuestionLevel")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionLevel");

                    b.Navigation("QuestionType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Examination_DAL.Models.Staff", b =>
                {
                    b.HasOne("Examination_DAL.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Examination_DAL.Models.UserPermission", b =>
                {
                    b.HasOne("Examination_DAL.Models.Account", "Account")
                        .WithMany("UserPermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examination_DAL.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Examination_DAL.Models.Account", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Examination_DAL.Models.Answer", b =>
                {
                    b.Navigation("AnswerResponses");
                });

            modelBuilder.Entity("Examination_DAL.Models.Classroom", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Examination_DAL.Models.Exam", b =>
                {
                    b.Navigation("ExamDetails");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamResponse", b =>
                {
                    b.Navigation("AnswerResponses");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamRoom", b =>
                {
                    b.Navigation("ExamSchedules");
                });

            modelBuilder.Entity("Examination_DAL.Models.ExamSchedule", b =>
                {
                    b.Navigation("ExamResponse");

                    b.Navigation("ExamScheduleDetail");
                });

            modelBuilder.Entity("Examination_DAL.Models.Participant", b =>
                {
                    b.Navigation("ExamResponses");

                    b.Navigation("ExamScheduleDetails");
                });

            modelBuilder.Entity("Examination_DAL.Models.Question", b =>
                {
                    b.Navigation("AnswerResponses");

                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Examination_DAL.Models.QuestionLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Examination_DAL.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Examination_DAL.Models.Staff", b =>
                {
                    b.Navigation("ExamDetails");

                    b.Navigation("ExamResponses");

                    b.Navigation("ExamSchedules");
                });

            modelBuilder.Entity("Examination_DAL.Models.Subject", b =>
                {
                    b.Navigation("ExamResponses");

                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
